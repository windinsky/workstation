var Condition = require('./condition');

const ABSOLUTE_TRUE = '1=1';
const ABSOLUTE_FALSE = '1=2';


exports.format_columns = function( table , columns ){
	
	if( !columns ) {
		columns = table;
		table = undefined;
	}

	if( !columns || !columns.length || columns.length == 0 ) return '';

	if( typeof columns === 'string' ) columns = columns.split(',');

	if( !columns.join ) throw 'unrecognized columns';

	if( table ){

		return columns.map( function(column){
			return table + '.' + column + ' as ' + table + '$' + column;
		} ).join(',');
	
	}else{
	
		return columns.join(',');

	}
	

}

var format_conditions = exports.format_conditions = function( conditions , start_with , end_with ){

	
	if( start_with && end_with ){
		throw 'you cannot specify start_with and end_with';
	}

	start_with = start_with || '';
	end_with = end_with || '';

	if( conditions === undefined){
		return absolute(start_with , end_with);
	}
	
	if( conditions instanceof String ){
		return {
			str : start_with + conditions + end_with,
			data : []
		}
	}

	if( conditions instanceof Condition ){
		return {
			str : start_with + conditions.str + end_with,
			data : conditions.data || []
		}
	}

	var str = [], data = [];

	if( conditions instanceof Array ){

		if( !conditions.length ){
			return absolute( start_with , end_with );
		}
		

		conditions.forEach( function(con){
			
			var _con = format_conditions( con );
			str.push( _con.str );
			data = data.concat( _con.data );
			
		} );

		return {
			str : [start_with , '(' , str.join(' and ') , ')' , end_with].join(' '),
			data : data
		};

	}

	if( conditions instanceof Object ){
		
		if( JSON.stringify(conditions) === '{}' ) return absolute( start_with , end_with );

		Object.keys( conditions ).forEach( function(c){

			if(c.indexOf('__') === 0){

				str.push( conditions[c] );

			}else{

				str.push( c + '=?' );
				data.push(conditions[c]);

			}

		} );

		return {
			str : [start_with , '(' , str.join(' or ') , ')' , end_with].join(' '),
			data : data
		};

	}

}

function absolute( start_with , end_with ){

	return {
		str : [start_with , ( ( start_with + end_with === 'or' ) ? ABSOLUTE_FALSE : ABSOLUTE_TRUE ) , end_with].join(' '),
		data : []
	}

}
