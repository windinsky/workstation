var utils        = require( './utils' );
var Column       = require( './column' );
var Condition    = require( './condition' );
var Mysql        = require( './adapter' );

var pluralize    = require( 'pluralize' );
var EventEmitter = require( 'events' ).EventEmitter;
var util         = require( 'util' );

var mysql        = new Mysql();

function MysqlRecord(data){

	EventEmitter.call(this);

	this.config = {};
	this.$record = {};


	var self = this, cons = self.constructor;

	for( var i in cons.__columns ){

		var validates = cons.__columns[i].validates;

		Object.defineProperty( this , i , {

			get: function(){

				return self.$record[i] || Column.defaultVal(this);

			}.bind(validates),

			set: function( column_name , val ){

				if(Column.validate(val,this)){

					return self.$record[column_name] = val;

				}

				return self.$record[column_name] = Column.defaultVal(this);

			}.bind(validates,i)

		} );

	}

	data && this.$set_record(data);

}

util.inherits( MysqlRecord , EventEmitter );

MysqlRecord.prototype.$set_record = function( record ){

	var cons    = this.constructor,
		self    = this,
		columns = cons.__columns;

	for( var i in columns ){
		
		if( columns.hasOwnProperty(i) ){

			var validates = columns[i].validates;
			
			if( record[i] ) self[i] = record[i];

			else self[i] = Column.defaultVal(validates);

		}

	}

	return this;

};


MysqlRecord.prototype.$define = function(key,value){

	this.config[key] = value;
	
	return this;

};

MysqlRecord.$define_table_name = function(name){

	this.$table_name = {
		plural : pluralize( name , 2 ),
		single : pluralize( name , 1 )
	};

};

MysqlRecord.$define_columns = function(columns){

	this.__columns = {};
	var self = this;

	columns.forEach( function( column ){
		self.__columns[ column.name ] = new Column( column );
	} );

};

MysqlRecord.$has_many = function(foreign_table,foreign_key,columns){

	columns = utils.format_columns(columns);

	this.$owns = this.$owns || {};
	this.$owns[foreign_key] = columns;

	this.prototype[foreign_table] = function(_columns,condition,callback){

		_columns = utils.format_columns(_columns) || columns;

		var _conditions = utils.format_condition( conditions , 'and' );

		return this.$query( 'select '+ _columns + 
			' from ' + foreign_table + 
			' where ' + foreign_key + '=' + this.id + _conditions.str + ';'
		, _conditions.data , callback );
	};

	return this;

};



MysqlRecord.$belongs_to = function(foreign_table, foreign_key, columns){


	var plural = pluralize( foreign_table , 2 );
	var single = pluralize( foreign_table , 1 );

	if(!columns){
		columns = foreign_key;
		foreign_key = single + '_id';
	}

	var columns = utils.format_columns(columns)

	this.$owned_by = this.$owned_by || {};
	this.$owned_by[single] = columns;

	this.prototype[foreign_table] = function(_columns,callback){
		
		_columns = utils.format_columns(_columns || '') || utils.format_columns(columns);

		return this.$query('select ' + _columns +
			' from ' + plural + 
			' where id =' + this[foreign_key] + ';'
		);

	};

	return this;

};

MysqlRecord.prototype.$query = function( sql , data , callback ){

	var self = this;
	
	mysql.query( sql , data , callback );

	mysql.once( 'end' , function( data ){
		self.emit( 'end' , data);
	} );

	mysql.once( 'error' , function(err){
		self.emit( 'error' , err );
	} );

	return this;

};

MysqlRecord.$has_and_belongs_to_many = function( middle_table , foreign_table , columns ){

	var plural = pluralize( foreign_table , 2 );
	var single = pluralize( foreign_table , 1 );

	var columns = utils.format_columns(columns);

	this.$owns_and_owned_by = this.$owns_and_owned_by || {};

	this.$owns_and_owned_by[plural] = {
		middle_table: middle_table,
		columns: columns
	}

	this.prototype[pluralize] = function( _columns , condition , callback ){
		
		var _condition = utils.format_condition( condition , 'and' );
		
		return this.$query('select ' + utils.format_columns + 
			' from ' + plural + 
			' where id in (' +
				'select ' + plural + '_id ' +
					'where ' + this.constructor.$table_name.single + '_id = ' + this.id + 
			') and ' + _condition.str + ';'
			, _condition.data
			, callback
		);
	
	};

};

MysqlRecord.$find = function( condition , columns , others , options , callback ){

	var e = new EventEmitter();

	if( typeof others == 'function' ){

		callback = others;
		others = '';
		
	}
	
	others = others || '';

	if( typeof options == 'function' ){

		callback = options;
		options = {};

	}

	options = options || {};

	if( typeof condition == 'number' ){

		condition = new Condition('id=?',[condition]);

	}

	var self = this;

	var _condition = utils.format_condition( condition );

	var sql = 'select ' + utils.format_columns( columns ) +
		' from ' + this.$table_name.plural +
		' where ' + _condition.str + others
	
	if( options.$with ){
		
		if( options.$with.constructor != Array ){
			options.$with = [options.$with];
		}

		options.$with.forEach( function( w ){
	
			if( self.$owns[w]){
				return sql += ' left join ' + 
					self.$owns[w].split(',').map(function(c){return w+'.'+c}).join(',') + 
					' on (' + w + '.' + self.$table_name.single + '_id = ' + self.$table_name.plural + '.id) ';
			}

			if( self.$owned_by[w]){
				var _w = pluralize( w , 2 );
				return sql += ' left join ' + 
					self.$owned_by[w].split(',').map(function(c){return _w+'.'+c}).join(',') +
					' on (' + self.$table_name.plural + '.' + w + '_id = ' + _w + '.id) ';
			}

			if( self.$owns_and_owned_by[w] ){

				var middle = self.$owns_and_owned_by[w], _w = pluralize( w , 1 ),
					_columns = self.$owns_and_owned_by[w].columns.split(',').map(function(c){return w+'.'+c}).join(',')
					
				return sql += ' left join ' + middle + '.id on(' + middle + '.' + self.$table_name.single + '_id = ' + self.$table_name.plural + '.id)'+
					' left join ' + _columns + ' on(' + w + '.id=' + middle +'.' + _w + '_id) ';
			}
			

		} );

		mysql.query( sql , _condition.data );

		mysql.once( 'end' , function( data ){
			console.log(data);
		} );

		return e;

	}else{
		
		return mysql.query( sql , _condition.data , callback );

	}

};

module.exports = MysqlRecord;
