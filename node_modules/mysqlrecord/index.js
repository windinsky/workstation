var utils        = require( './utils' );
var Column       = require( './column' );
var Condition    = require( './condition' );
var Mysql        = require( './adapter' );

var pluralize    = require( 'pluralize' );
var EventEmitter = require( 'events' ).EventEmitter;
var util         = require( 'util' );

var mysql        = new Mysql();

const ABSOLUTE_TRUE = '1=1';
const ABSOLUTE_FALSE = '1=2';

function MysqlRecord(data){

	EventEmitter.call(this);

	this.config = {};
	this.$record = {};


	var self = this, cons = self.constructor;

	for( var i in cons.__columns ){

		var validates = cons.__columns[i].validates;

		Object.defineProperty( this , i , {

			get: function(column_name){

				return self.$record[column_name] || Column.defaultVal(this);

			}.bind(validates,i),

			set: function( column_name , val ){

				console.log(column_name , val , Column.convert_type(val , this.type));

				if(Column.validate(val,this)){

					return self.$record[column_name] = Column.convert_type(val,this.type);

				}

				return self.$record[column_name] = Column.defaultVal(this);

			}.bind(validates,i)

		} );

	}

	data && this.$set_record(data);

}

util.inherits( MysqlRecord , EventEmitter );

MysqlRecord.prototype.$set_record = function( record ){

	var cons    = this.constructor,
		self    = this,
		columns = cons.__columns;

	for( var i in columns ){
		
		if( columns.hasOwnProperty(i) ){

			var validates = columns[i].validates;
			
			if( record[i] ) self[i] = record[i];

			else self[i] = Column.defaultVal(validates);

		}

	}

	return this;

};


MysqlRecord.prototype.$define = function(key,value){

	this.config[key] = value;
	
	return this;

};

MysqlRecord.$define_table_name = function(name){

	this.$table_name = {
		plural : pluralize( name , 2 ),
		single : pluralize( name , 1 )
	};

};

MysqlRecord.$define_columns = function(columns){

	this.__columns = {};
	var self = this;

	columns.forEach( function( column ){
		self.__columns[ column.name ] = new Column( column );
	} );

};

MysqlRecord.$has_many = function(foreign_table,foreign_key,columns){

	columns = utils.format_columns(table,columns);

	this.$owns = this.$owns || {};
	this.$owns[foreign_key] = columns;

	this.prototype[foreign_table] = function( _columns , condition , callback ){

		_columns = utils.format_columns( foreign_table , _columns ) || columns;

		var _conditions = utils.format_conditions( conditions , 'and' );

		return this.$query( 'select '+ _columns + 
			' from ' + foreign_table + 
			' where ' + foreign_key + '=' + this.id + _conditions.str + ';'
		, _conditions.data , callback );
	};

	return this;

};



MysqlRecord.$belongs_to = function( foreign_table, columns , foreign_key ){


	var plural = pluralize( foreign_table , 2 );
	var single = pluralize( foreign_table , 1 );

	columns = utils.format_columns( this.table_name.plural , columns );

	if( !columns ) throw 'columns empty';

	foreign_key = single + '_id';


	this.$owned_by = this.$owned_by || {};
	this.$owned_by[single] = columns;

	this.prototype[foreign_table] = function(_columns,callback){
		
		_columns = utils.format_columns( plural , _columns || '' ) || columns;

		return this.$query('select ' + _columns +
			' from ' + plural + 
			' where id =' + this[foreign_key] + ';',[],callback
		);

	};

	return this;

};

MysqlRecord.prototype.$query = function( sql , data , callback ){

	var self = this;
	
	mysql.query( sql , data , callback );

	mysql.once( 'end' , function( data ){
		self.emit( 'end' , data);
	} );

	mysql.once( 'error' , function(err){
		self.emit( 'error' , err );
	} );

	return this;

};

MysqlRecord.$has_and_belongs_to_many = function( foreign_table , columns , options ){

	var plural = pluralize( foreign_table , 2 );
	var single = pluralize( foreign_table , 1 );

	options = options || {};

	options.join_table = options.join_table || [pluralize,this.$table_name.plural].sort().join('_');

	options.foreign_key = options.foreign_key || this.$table_name.single + '_id';

	options.join_condition = options.join_condition || ABSOLUTE_TRUE;

	options.association_foreign_key = options.association_foreign_key || single + '_id';

	columns = utils.format_columns( plural , columns );

	this.$owns_and_owned_by = this.$owns_and_owned_by || {};

	this.$owns_and_owned_by[plural] = {
		options : options,
		columns : columns
	}

	this.prototype[plural] = function( _columns , condition , callback ){
		
		var _condition = utils.format_conditions( condition , 'and' );
		var opt = this.constructor.$owns_and_owned_by[plural].options;
		var self = this;
		
		return this.$query('select ' + utils.format_columns( plural , _columns || columns ) + 
			' from ' + plural + 
			' where id in (' +
				'select ' + opt.association_foreign_key + ' from ' + opt.join_table +
					' where ' + opt.foreign_key + '=' + self.id + ' and ' + opt.join_condition + 
			') ' + _condition.str + ';'
			, _condition.data
			, callback
		);
	
	};

};

MysqlRecord.$find = function( condition , columns , others , options , callback ){

	var e = new EventEmitter();

	if( !columns ){
		throw 'columns empty!';
	}

	if( typeof others == 'function' ){

		callback = others;
		options = {};
		others = '';
		
	}

	if( typeof others == 'object' ){
		
		callback = options;
		options = others ;
		others = '';
	}

	others = others || '';

	if( typeof options == 'function' ){

		callback = options;
		options = {};

	}

	options = options || {};

	if( typeof condition == 'number' ){

		condition = new Condition(this.$table_name.plural + '.id=?',[condition]);

	}

	var self = this;

	var _condition = utils.format_conditions( condition );

	var sql = [];
	
	if( options.$with ){

		columns = [utils.format_columns( this.$table_name.plural , columns )];
		
		if( options.$with.constructor != Array ){ options.$with = [options.$with]; }

		options.$with.forEach( function( w ){
	
			if( self.$owns[w]){
			
				columns.push(self.$owns[w]);

				return sql.push( ' left join ' + 
					self.$owns[w].split(',').map(function(c){return w+'.'+c}).join(',') + 
					' on (' + w + '.' + self.$table_name.single + '_id = ' + self.$table_name.plural + '.id) ' );
			}

			if( self.$owned_by[w]){
				var _w = pluralize( w , 2 );

				columns.push(self.$owned_by[w]);

				return sql.push( ' left join ' + 
					self.$owned_by[w].split(',').map(function(c){return _w+'.'+c}).join(',') +
					' on (' + self.$table_name.plural + '.' + w + '_id = ' + _w + '.id) ' );
			}

			if( self.$owns_and_owned_by[w] ){

				var cfg = self.$owns_and_owned_by[w]
					, opt = cfg.options
					, join = opt.join_table
					, _w = pluralize( w , 1 )
					, _columns = self.$owns_and_owned_by[w].columns.split(',').map(function(c){return w+'.'+c}).join(',');

				columns.push(self.$owns_and_owned_by[w].columns);
					
				return sql.push( ' left join ' + join + ' on(' + join + '.' + opt.foreign_key + ' = ' + self.$table_name.plural + '.id and ' + opt.join_condition + ')'+
					' left join ' + w + ' on(' + w + '.id=' + join +'.' + opt.association_foreign_key + ')' );
			}
			
		} );

		sql.unshift( 'select ' + columns.join(',') + ' from ' + this.$table_name.plural );
		sql.push( ' where ' + _condition.str + others );

		function group_by_table( record ){

			var result = {};

			Object.keys(record).forEach(function(k){
				var key    = k.split('$'),
					table  = key[0],
					column = key[1];

				result[table] = result[table] || {};

				result[table][column] = record[k];

			});

			return result;

		}

		mysql.query( sql.join('') , _condition.data );

		mysql.once( 'end' , function( data ){

			if(!data.length) return e.emit( 'end' , data );

			var result = [];

			data.forEach(function(d){

				var d = group_by_table(d),

					self_data = d[self.$table_name.plural],last_data = result[result.length - 1] || {},

					same = Object.keys(self_data).every(function(k){
						return self_data[k] === last_data[k];
					});

				if(!same){
					result.push(self_data);
					last_data = self_data;
				}
				
				delete d[self.$table_name.plural];

				Object.keys( d ).forEach( function( k ){

					var all_null = Object.keys(d[k]).every(function(_k){ return d[k][_k] === null; });

					if( self.$owns[k] || self.$owns_and_owned_by[k] ){

						last_data[k] = last_data[k] || [];

						all_null || last_data[k].push(d[k]);

					}else if(self.$owned_by[k]){

						var s = pluralize(k,1);

						last_data[k] = last_data[k] || [];

						all_null || (last_data[s] = d[k]);

					}
				} );
			});

			typeof callback === 'function' && callback( undefined , result );
			return e.emit( 'end' , result );

		} );

		mysql.once( 'error' , function(err){
			typeof callback === 'function' && callback( err );
			return e.emit( 'end' , err );
		} );

		return e;

	}else{

		columns = utils.format_columns( columns );

		return mysql.query( 'select ' + columns + ' from ' + self.$table_name.plural + ' where ' + _condition.str + ';' , _condition.data , callback );

	}

};

MysqlRecord.prototype.$save = function( columns , opt , callback ){

	var self = this;

	if( typeof columns !== 'string' ){
		throw 'columns format error';
	}

	if( typeof columns === 'string' ){
		columns = columns.split( ',' ).filter( function(c){
			return self.constructor.__columns[c] !== undefined;
		} );
	}

	if( columns.constructor !== Array ){
		throw 'columns type error';
	}

	if( typeof opt === 'function' ){
		callback = opts;
		opt = {};
	}

	if( !opt ){
		opt = {};
	}

	var primary_key = this.constructor.$primary_key || 'id';

	return this[primary_key] ? this.$update( columns , opt.conditions , opt.return_columns , callback ) : this.$add( columns , opt.return_columns , callback );

};

MysqlRecord.prototype.$update = function( columns , conditions , return_columns , callback ){

	var self = this, table = self.constructor.$table_name.plural,
		primary_key = self.constructor.$primary_key || 'id',
		primary_val = self[primary_key];

	var data = columns.map( function(c){
		return self[c];
	} );

	conditions = utils.format_conditions( conditions , 'and' );

	columns = utils.format_columns( columns )

	var _columns = columns.split(',').map( function(c){
		return c + '=' + '?'
	} ).join(',');


	var sql = 'update ' + table + ' set ' + _columns + ' where ' + primary_key + '= ? ' + conditions.str;

	data.push(primary_val);

	data = data.concat( conditions.data );

	mysql.query( sql , data , function( err , data ){

		if(err){
			typeof callback === 'function' && callback( err );
			return self.emit('error',err);
		}

		if( data.affectedRows === 0 ){
			return self.emit('end',[]);
		}

		sql = 'select ' + (return_columns || columns) + ' from ' + table + ' where ' + primary_key + '=? ' + conditions.str;

		data = [primary_val].concat( conditions.data );

		mysql.query( sql , data , function( _err , _data ){
			
			if( _err ){
				typeof callback === 'function' && callback( err );
				return self.emit('error',_err);
			}
			typeof callback === 'function' && callback( undefined , _data );
			self.emit( 'end' , _data );

		} );

	} );
	
	return this;
	
};


MysqlRecord.prototype.$add = function( columns , return_columns , callback ){

	var self = this , table = self.constructor.$table_name.plural;

	var sql = 'insert into ' + table + ' (' + columns + ') values (' + columns.map(function(){return '?';}).join(',') +');';

	var data = columns.map(function(c){
		return self[c];
	});

	mysql.query( sql , data , function( err , data ){

		if( err ){
			typeof callback === 'function' && callback( err );
			return self.emit( 'err' , err );
		}

		sql = 'select ' + (return_columns || columns.join(',')) + ' from ' + table + ' where ' + (self.constructor.$primary_key || 'id') + '=?;';

		d = [data.insertId];

		mysql.query( sql , d , function( _err , _data ){
			
			if( _err ){
				typeof callback === 'function' && callback( _err );
				return self.emit( 'err' , _err );
			}
			typeof callback === 'function' && callback( undefined , _data );
			return self.emit( 'end' , _data );

		} );
	
	} );

	return this;

};

MysqlRecord.prototype.$delete = function( callback ){
	
	var self = this
		, primary_key = this.constructor.$primary_key || 'id'
		, sql = 'delete from ' + this.constructor.$table_name.plural + ' where ' + primary_key + '=?'
		, data = [this[primary_key]];

	mysql.query( sql , data , function( err , data ){
		
		if( err ){
			typeof callback === 'function' && callback( err );
			return self.emit( 'error' , err );
		}
		
		typeof callback === 'function' && callback( undefined , data.affectedRows );
		return self.emit( 'end' , data.affectedRows );

	} );

	return self;

};

MysqlRecord.$delete = function( conditions , callback ){

	var e = new EventEmitter();

	if( !conditions ) throw 'you can not delete all records, it is too dangerous!';

	var sql = '', data = [] , self = this;

	if( ['number','string'].indexOf(typeof conditions) !== -1 ){
	
		sql = 'delete from ' + self.$table_name.plural + ' where ' + (self.$primary_key || 'id') + '= ?;';
		data = [conditions];
	
	}else{
		
		conditions = utils.format_conditions(conditions);
	
		sql = 'delete from ' + self.$table_name.plural + ' where ' +conditions.str + ';';
		data = data.concat(conditions.data);

	}

	mysql.query( sql , data , function( err , data ){

		if( err ){

			typeof callback === 'function' && callback( err );
			e.emit( 'err' , err );

		}else{
			
			typeof callback === 'function' && callback( undefined , data.affectedRows );
			e.emit( 'end' , data.affectedRows );

		}
	
	} );

	return e;

}

MysqlRecord.$owns = {};
MysqlRecord.$owned_by = {};
MysqlRecord.$owns_and_owned_by = {};

module.exports = MysqlRecord;
